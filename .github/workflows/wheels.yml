name: Build wheels

on:
  push:
    tags:
      - v*

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-latest, windows-latest]
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4

      - name: Set some environmental variables on macOS
        if: startsWith(matrix.os, 'macos')
        run: |
          if [ "$RUNNER_ARCH" == "ARM64" ]; then
            echo "X_SIMD_CHARM=--enable-neon" >> $GITHUB_ENV
            echo "X_SIMD_FFTW=" >> $GITHUB_ENV
          else
            echo "X_SIMD_CHARM=--enable-avx" >> $GITHUB_ENV
            echo "X_SIMD_FFTW=--enable-avx" >> $GITHUB_ENV
          fi
          echo "X_LLVM_TARGZ=openmp-14.0.6-darwin20-Release.tar.gz" >> $GITHUB_ENV
          echo "X_FFTW=fftw-3.3.10" >> $GITHUB_ENV

      - name: Setup MSVC on Windows
        if: startsWith(matrix.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1

      - name: Get CCCL wrapper for MSVC on Windows
        if: startsWith(matrix.os, 'windows')
        run: |
          git clone https://github.com/swig/cccl cccl-repo

      - name: Install libomp on macOS
        if: startsWith(matrix.os, 'macos')
        run: |
          # On MacOS, we want to use the default Apple's Clang compiler.  
          # Unfortunately, Clang does not seem to support OpenMP out of the 
          # box, so we need to install the "libomp" library from LLVM.  One 
          # could use the homebrew package manager for this purpose, but this 
          # has the downside of making the output Python wheels to be dependent 
          # on newer libraries (see 
          # https://cibuildwheel.pypa.io/en/stable/faq/#macos-library-dependencies-do-not-satisfy-target-macos).  
          # The solution recommended by the "cibuildwheel" developers is to 
          # build the libraries from source.  Fortunately, we can download 
          # a pre-built "libomp" and install it.  FFTW, on the other hand, will 
          # be built from source later.
          curl -O https://mac.r-project.org/openmp/$X_LLVM_TARGZ
          sudo tar fvxz $X_LLVM_TARGZ -C /

      - name: Install or download FFTW on Windows and macOS
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
               # Instead of installing FFTW using homebrew, we need to build it 
               # from source (see above)
               wget http://fftw.org/$X_FFTW.tar.gz
               tar xzf $X_FFTW.tar.gz
          elif [ "$RUNNER_OS" == "Windows" ]; then
               vcpkg install fftw3:x64-windows
          fi
 
      - name: Install MPFR on Windows and macOS
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            # TODO
          elif [ "$RUNNER_OS" == "Windows" ]; then
               vcpkg install mpfr:x64-windows
          fi

      - name: Prepare configure/setup.py
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            touch setup.py
          elif [ "$RUNNER_OS" == "macOS" ]; then
            touch setup.py
          elif [ "$RUNNER_OS" == "Windows" ]; then
            export PATH=./cccl-repo:$PATH
            export CC=cccl
            export LD=cccl
            export CFLAGS="/O2 /fp:fast /FS /GL"
            export CPPFLAGS="-IC:\vcpkg\installed\x64-windows\include"
            export LDFLAGS="-LC:\vcpkg\installed\x64-windows\lib"

           ./configure --enable-openmp --enable-avx --enable-mpfr --enable-python --enable-msvc-underscore-patch
          fi

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0
        env:
          CIBW_BUILD_VERBOSITY: 1
          CIBW_SKIP: "cp36-* cp37-* cp38-* cp39-* pp37-* pp38-* pp39-*
                      *-manylinux_i686 *-musllinux_i686 *-win32*"
          CIBW_CACHE_PATH: "./cibw_cache"


          CIBW_ENVIRONMENT_LINUX: CC='gcc' CFLAGS='-O3 -ffast-math -Wpedantic -Wall' LIBS='-lgomp'
          CIBW_BEFORE_ALL_LINUX: "yum install -y fftw-devel mpfr-devel ||
                                  apk add --upgrade fftw-dev gmp-dev mpfr-dev ||
                                  apt-get install -y libfftw3-dev mpfr-dev &&
                                  ./configure --enable-openmp --enable-avx --enable-mpfr --enable-python --with-gnu-ld &&
                                  make -j &&
                                  make check"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux_2_28"
          CIBW_MANYLINUX_PYPY_X86_64_IMAGE: "manylinux_2_28"


          MACOSX_DEPLOYMENT_TARGET: 11.0
          CIBW_ENVIRONMENT_MACOS: CC='clang' LIBS='-lomp'
          CIBW_BEFORE_ALL_MACOS: "cd $X_FFTW &&
                                  ./configure CPPFLAGS=\"-Xpreprocessor -fopenmp\" --enable-openmp --enable-shared --prefix=$(pwd) $X_SIMD_FFTW --with-gnu-ld &&
                                  make -j &&
                                  make install &&
                                  cd .. &&
                                  ./configure CFLAGS=\"-O3 -ffast-math -Wpedantic -Wall\" CPPFLAGS=\"-Xpreprocessor -fopenmp -I$(pwd)/$X_FFTW/include\" LDFLAGS=\"-L$(pwd)/$X_FFTW/lib\" --enable-openmp $X_SIMD_CHARM --enable-python --with-gnu-ld &&
                                  make -j &&
                                  make check"


          CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: 'delvewheel repair --add-path C:\vcpkg\installed\x64-windows\bin -w {dest_dir} {wheel}'

        with:
          package-dir: .
          output-dir: wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
