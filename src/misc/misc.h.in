/**
 * \file charm@P@_misc.h
 *
 * Module defining some miscellaneous functions, macros, constants, etc.
 *
 * \verbatim embed:rst:leading-asterisk
 *      .. note::
 *
 *          This documentation is written for double precision version of
 *          CHarm.
 *
 * \endverbatim
 *
 * */






#ifndef __CHARM@PC@_MISC_H__
#define __CHARM@PC@_MISC_H__


/* Header files needed by this module */
/* ------------------------------------------------------------------------- */
#include <stdio.h>
#include <charm/charm@P@_err.h>
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C"
{
#endif
/* ------------------------------------------------------------------------- */






/* Symbolic constants */
/* ------------------------------------------------------------------------- */
/**
 * Major version number of CHarm. */
#define CHARM_VERSION_MAJOR @CHARM_MAJOR@


/**
 * Minor version number of CHarm. */
#define CHARM_VERSION_MINOR @CHARM_MINOR@


/**
 * Patch number of CHarm. */
#define CHARM_VERSION_PATCH @CHARM_PATCH_NUMBER@


/**
 * Version of CHarm. */
#define CHARM_VERSION_STRING "@CHARM_MAJOR@.@CHARM_MINOR@.@CHARM_PATCH@"
/* ------------------------------------------------------------------------- */






/* Macros */
/* ------------------------------------------------------------------------- */
/**
 * Returns the minimum of ``a`` and ``b``.
 * */
#undef  CHARM_MIN
#define CHARM_MIN(a, b) (((a) < (b)) ? (a) : (b))


/**
 * Returns the maximum of ``a`` and ``b``.
 * */
#undef  CHARM_MAX
#define CHARM_MAX(a, b) (((a) > (b)) ? (a) : (b))
/* ------------------------------------------------------------------------- */






/* Function prototypes */
/* ------------------------------------------------------------------------- */
/** @brief Returns a string specifying the CHarm version number determined on
 * compilation time. */
CHARM_EXTERN const char *CHARM_CDECL charm@P@_misc_get_version(void);






/** @brief Prints library info to ``stdout`` (library name, version,
 * compilation date, precision, etc). */
CHARM_EXTERN void CHARM_CDECL charm@P@_misc_print_info(void);






/** @brief Returns:
 *
 * * ``1`` if CHarm was compiled in single precision
 *   (``--enable-single-precision``),
 *
 * * ``2`` if CHarm was compiled in double precision
 *   (``--enable-double-precision`` or no precision flag),
 *
 * * ``3`` if CHarm was compiled quadruple precision
 *   (``--enable-quad-precision``). */
CHARM_EXTERN int CHARM_CDECL charm@P@_misc_buildopt_precision(void);






/** @brief Returns:
 *
 * * ``0`` if CHarm was compiled with SIMD instructions disabled,
 *
 * * ``1`` if CHarm was compiled with AVX instructions enabled
 *   (``--enable-avx``),
 *
 * * ``2`` if CHarm was compiled with AVX2 instructions enabled
 *   (``--enable-avx2``),
 *
 * * ``3`` if CHarm was compiled with AVX-512 instructions enabled
 *   (``--enable-avx-512``),
 *
 * * ``4`` if CHarm was compiled with NEON instructions enabled
 *   (``--enable-neon``),
 *
 * * ``5`` if CHarm was compiled with SSE4.1 instructions enabled
 *   (``--enable-sse4.1``).
 *
 * */
CHARM_EXTERN int CHARM_CDECL charm@P@_misc_buildopt_simd(void);






/** @brief Returns the size of SIMD vectors if CHarm was compiled with SIMD
 * instructions enabled and ``1`` otherwise (SIMD instructions disabled). */
CHARM_EXTERN int CHARM_CDECL charm@P@_misc_buildopt_simd_vector_size(void);






/** @brief Returns a non-zero value if CHarm was compiled with the OpenMP
 * parallelization enabled (``--enable-openmp``).  Otherwise, zero is
 * returned. */
CHARM_EXTERN int CHARM_CDECL charm@P@_misc_buildopt_omp_charm(void);






/** @brief Returns a non-zero value if the host's FFTW library supports OpenMP
 * parallelization.  Otherwise, zero is returned.
 *
 * @details If non-zero, FFTW computations are parallelized. */
CHARM_EXTERN int CHARM_CDECL charm@P@_misc_buildopt_omp_fftw(void);






/** @brief Returns a non-zero value if CHarm was compiled with the MPI
 * parallelization enabled (``--enable-mpi``).  Otherwise, zero is returned. */
CHARM_EXTERN int CHARM_CDECL charm@P@_misc_buildopt_mpi(void);






/** @brief Returns a non-zero value if CHarm was compiled with the MPFR enabled
 * (``--enable-mpfr``).  Otherwise, zero is returned. */
CHARM_EXTERN int CHARM_CDECL charm@P@_misc_buildopt_mpfr(void);






/** @brief Returns a string specifying the FFTW library version. */
CHARM_EXTERN const char *CHARM_CDECL charm@P@_misc_buildopt_version_fftw(void);






/** @brief If CHarm was compiled with the MPI parallelization enabled
 * (``--enable-mpi``), sets ``major_header``, ``major_lib`` and
 * ``minor_header``, ``minor_lib`` to the version (``major_*``) and subversion
 * (``minor_*``) of the MPI standard that is being supported by the linked MPI
 * implementation.  The ``*_header`` values are taken from the included MPI's
 * header file on compile time and the ``*_lib`` values are determined on
 * runtime.  If MPI parallelization is disabled, all four values are set to
 * ``-1``.
 *
 * \verbatim embed:rst:leading-asterisk
 *
 *  .. note::
 *
 *      All four version numbers are related to the MPI standard.  To see the
 *      version of the linked MPI implementation, call
 *      ``charm@P@_misc_print_info()``.
 *
 * \endverbatim
 *
 * */
CHARM_EXTERN void CHARM_CDECL charm@P@_misc_buildopt_version_mpi(
                                            int *major_header,
                                            int *minor_header,
                                            int *major_lib,
                                            int *minor_lib);






/** @brief If CHarm was compiled with the MPFR support (``--enable-mpfr``),
 * returns a string determined on runtime specifying the MPFR library version
 * and sets ``major``, ``minor`` and ``patch`` to the symbolic constants
 * ``MPFR_VERSION_MAJOR``, ``MPFR_VERSION_MINOR`` and
 * ``MPFR_VERSION_PATCHLEVEL`` determined on compile time.  Should any of the
 * symbolic constants not be defined, the corresponding input parameter is set
 * to ``-1``.
 *
 * If CHarm was compiled without the MPFR support, returns the ``n/a`` string
 * and sets ``major``, ``minor`` and ``patch`` to ``-1``.
 *
 * */
CHARM_EXTERN const char *CHARM_CDECL charm@P@_misc_buildopt_version_mpfr(
                                                       int *major,
                                                       int *minor,
                                                       int *patch);






/** @brief The same as ``charm@P@_misc_buildopt_version_mpfr()`` but for the
 * GMP library (note that ``--enable-gmp`` is not a valid installation flag,
 * though). */
CHARM_EXTERN const char *CHARM_CDECL charm@P@_misc_buildopt_version_gmp(
                                                      int *major,
                                                      int *minor,
                                                      int *patch);






/** @brief Returns a non-zero value if correctly working ``isfinite`` macro was
 * found in the system's ``math.h`` header file before the compilation.
 * Otherwise, zero is returned.
 *
 * @details On some systems, ``isfinite`` is available in ``math.h``, but it is
 * not working correctly with ``__float128`` floating point data type
 * (quadruple precision).  The macro may also not work correctly with the
 * ``-ffast-math`` compiler flag (e.g., ``gcc`` and ``clang``).  In these
 * cases, zero is returned. */
CHARM_EXTERN int CHARM_CDECL charm@P@_misc_buildopt_isfinite(void);
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
#ifdef __cplusplus
}
#endif
/* ------------------------------------------------------------------------- */


#endif
