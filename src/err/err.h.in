/**
 * \file charm@P@_err.h
 *
 * Error handling module:
 *
 * * defines, initializes, frees and resets the ``charm@P@_err`` structure,
 *
 * * tests whether a ``charm@P@_err`` structure is empty, and
 *
 * * handles errors.
 *
 * @note When CHarm detects an error (e.g., an internal memory allocation
 * failure), it properly frees all the internally allocated memory before
 * returning back to the caller. No memory leaks should therefore occur, not
 * even after a premature exit.
 *
 * */






#ifndef __CHARM@PC@_ERR_H__
#define __CHARM@PC@_ERR_H__


/* Header files required by this module */
/* ------------------------------------------------------------------------- */
#include <stdio.h>
#if @WITH_MPI@
#   include <mpi.h>
#endif
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C"
{
#endif
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
#undef CHARM_ERR_MAX_FILE
/** Maximum number of characters that can be stored in
 * ``charm@P@_err.file[i]``, ``i = 0, 1, ..., ::CHARM_ERR_MAX_LEVEL - 1``,
 * including the terminating null character.  */
#define CHARM_ERR_MAX_FILE 4096U


#undef CHARM_ERR_MAX_FUNC
/** Maximum number of characters that can be stored in
 * ``charm@P@_err.func[i]``, ``i = 0, 1, ..., ::CHARM_ERR_MAX_LEVEL - 1``,
 * including the terminating null character.  */
#define CHARM_ERR_MAX_FUNC 256U


#undef CHARM_ERR_MAX_MSG
/** Maximum number of characters in ``charm@P@_err.msg``, including the
 * terminating null character.  */
#define CHARM_ERR_MAX_MSG 4096U


#undef CHARM_ERR_MAX_LEVEL
/** Maximum number of error propagations from the function, in which the error
 * occurred to the caller.  */
#define CHARM_ERR_MAX_LEVEL 10U
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
/**
 * Errors enumeration.
 * */
enum
{
    /**
     * Exit status returned when CHarm is explicitly asked to terminate the 
     * program in case it encounters an error. */
    CHARM_FAILURE = -1,


    /**
     * Successful execution of a CHarm function. */
    CHARM_SUCCESS,


    /**
     * Memory allocation failure (malloc, calloc). */
    CHARM_EMEM,


    /**
     * Error in function input/output argument(s). */
    CHARM_EFUNCARG,


    /**
     * Error in file reading/writing. */
    CHARM_EFILEIO,


    /**
     * Error in threads initialization by FFTW. */
    CHARM_EFFTWINIT,


    /**
     * Error reported by some other MPI process within the communicator. */
    CHARM_EMPIPROCESS
};
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
#undef  CHARM_ERR_MALLOC_FAILURE
/**
 * Message to be printed when ``malloc`` or ``calloc`` fails. */
#define CHARM_ERR_MALLOC_FAILURE "Memory allocation failure."


#undef  CHARM_ERR_FFTW_INIT_FAILURE
/** Message to be printed when FFTW fails to initialize OpenMP threads. */
#define CHARM_ERR_FFTW_INIT_FAILURE "FFTW failed to initialize OpenMP threads."
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
/**
 * Error structure.
 *
 * In most cases, it is created by functions from this module that return 
 * a pointer to ``charm@P@_err``.  Experienced users may create the structure 
 * on their own, provided that they assign correct values to its members, so 
 * that CHarm can properly understood the data in it (see the rules summarized 
 * below). */
typedef struct
{
    /**
     * Total number of error propagations from the function in which the error 
     * was encountered back to the caller. */
    size_t level;


    /** ``charm@P@_err.file[0]`` is a pointer to a string with the name of the
     * file in which the error was encountered; ``charm@P@_err.file[i]``,
     * ``i = 1, 2, ..., ::CHARM_ERR_MAX_LEVEL - 1``, are file names through
     * which the error was propagated to the caller. */
    char **file;


    /** Pointer to an array with line numbers of ``charm@P@_err.file[i]``,
     * ``i = 0, 1, ..., ::CHARM_ERR_MAX_LEVEL - 1``, at which the
     * ``charm@P@_err`` structure was modified.  */
    size_t *line;


    /** Same as ``charm@P@_err.file``, but with function names.  */
    char **func;


    /** Error code (see the errors enumerations ``::CHARM_FAILURE``,
     * ``::CHARM_SUCCESS``, etc.).  */
    int code;


    /**
     * Pointer to an error message.
     * */
    char *msg;


    /** * ``0`` if the error structure can accomocate one or more error
     *    propagations.
     *
     * * ``1`` if the error structure is saturated and can no longer store the
     *   most recent error propagations (this should never happen, though,
     *   since ``::CHARM_ERR_MAX_LEVEL`` is large enough). */
    _Bool saturated;


    /** * ``0`` if the error structure was created by ``charm@P@_err_init()``.
     *
     * * ``1`` if the error structure was created by
     *   ``charm@P@_mpi_err_init()``. */
    _Bool distributed;


#if @WITH_MPI@
    /** MPI communicator defining the group of MPI processes that share the
     * error structure.
     *
     * @note This member is available only when CHarm is compiled with the MPI
     * support (``--enable-mpi``, refer to <a
     * href="./api-c-mpi.html">charm@P@_mpi</a> for further details).
     *
     * */
    MPI_Comm comm;
#endif
} charm@P@_err;
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
/** @brief Allocates and initializes the ``charm@P@_err`` structure using
 * default empty values.
 *
 * @returns On success, returned is a pointer to the ``charm@P@_err``
 * structure.  On error, ``NULL`` is returned.  */
CHARM_EXTERN charm@P@_err * CHARM_CDECL charm@P@_err_init(void);
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
/** @brief Frees the memory associated with ``err``.  No operation is performed
 * if ``err`` is ``NULL``. */
CHARM_EXTERN void CHARM_CDECL charm@P@_err_free(charm@P@_err *err);
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
/** @brief Resets ``err`` to the default empty values.  */
CHARM_EXTERN void CHARM_CDECL charm@P@_err_reset(charm@P@_err *err);
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
/** @brief Error handler.
 *
 * @details
 *
 * * If ``err`` is not empty, prints detailed information on the error.  If
 * ``terminate`` is set to Boolean ``1``, the program subsequently terminates.
 *
 * * If ``err`` is empty, neither an error is printed nor the program is
 *   terminated (regardless of the ``terminate`` value).
 *
 * Before leaving the function, ``err`` is reset to the default empty values.
 *
 * @note It is highly recommended to call the error handling function after
 * every call of CHarm routines that take the ``charm@P@_err`` structure as an
 * input.
 *
 * */
CHARM_EXTERN void CHARM_CDECL charm@P@_err_handler(charm@P@_err *err,
                                           _Bool terminate);
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
/** @brief Returns boolean ``1`` if ``err`` is empty or ``0`` otherwise.  */
CHARM_EXTERN _Bool CHARM_CDECL charm@P@_err_isempty(const charm@P@_err *err);
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
#ifdef __cplusplus
}
#endif
/* ------------------------------------------------------------------------- */


#endif
