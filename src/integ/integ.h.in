/**
 * \file charm@P@_integ.h
 *
 * Module to compute the following integrals:
 *
 * * a product of two fully-normalized associated Legendre functions and a sine
 * of a co-latitude,
 *
 * \verbatim embed:rst:leading-asterisk
 *      .. math::
 *
 *          \int\limits_{\theta_1}^{\theta_2} \bar{P}_{n_1,m_1}(\cos\theta) \,
 *          \bar{P}_{n_2,m_2}(\cos\theta) \, \sin(\theta) \,
 *          \mathrm{d}\theta{,} \quad \theta_1 \leq \theta_2{,}
 *
 * \endverbatim
 *
 * * a product of two \f$4 \pi\f$ fully-normalized surface spherical harmonic 
 * functions over a rectangular cell on the unit sphere,
 *
 * \verbatim embed:rst:leading-asterisk
 *      .. math::
 *
 *          \int\limits_{\theta_1}^{\theta_2}
 *          \int\limits_{\lambda_1}^{\lambda_2} \bar{Y}_{n_1,m_1}(\theta,
 *          \lambda) \, \bar{Y}_{n_2,m_2}(\theta, \lambda) \, \mathrm{d}\lambda
 *          \, \sin(\theta) \, \mathrm{d}\theta{,} \quad \theta_1 \leq
 *          \theta_2{,} \quad \lambda_1 \leq \lambda_2{.}
 *
 * \endverbatim
 *
 * \verbatim embed:rst:leading-asterisk
 *      .. note::
 *
 *          This documentation is written for double precision version of 
 *          CHarm.
 *
 * \endverbatim
 *
 * ============================================================================
 *
 * */






#ifndef __CHARM@PC@_INTEG_H__
#define __CHARM@PC@_INTEG_H__


/* Header files required by this module */
/* ------------------------------------------------------------------------- */
#include <stdio.h>
#include <charm/charm@P@_err.h>
#include <charm/charm@P@_leg.h>
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C"
{
#endif
/* ------------------------------------------------------------------------- */






/* Function prototypes */
/* ------------------------------------------------------------------------- */
/** Analytically computes the integral
 *
 * \verbatim embed:rst:leading-asterisk
 *      .. math::
 *
 *          \mathrm{ip}
 *          = \int\limits_{\theta_{\mathrm{min}}}^{\theta_{\mathrm{max}}}
 *          \bar{P}_{n_1, m_1}(\cos\theta) \, \bar{P}_{n_2, m_2}(\cos\theta) \,
 *          \sin\theta \, \mathrm{d}\theta{,} \quad \theta_{\mathrm{min}} \leq
 *          \theta_{\mathrm{max}}{.}
 *
 * \endverbatim
 *
 * @details The computation is based on the Fourier coefficients of the
 * associated Legendre functions (see Eq. 33 of Pail and Plank, 2001).
 *
 *
 * **References**: 
 *
 * * Pail, R., Plank, G., Schuh, W.-D. (2001) Spatially restricted data 
 *   distributions on the sphere: the method of orthonormalized functions and 
 *   applications. Journal of Geodesy 75:44--56
 *
 *
 * @param[in] cltmin Minimum co-latitude in radians.
 * @param[in] cltmax Maximum co-latitude in radians.
 * @param[in] n1 Harmonic degree of the first Legendre function.
 * @param[in] m1 Harmonic order of the first Legendre function.
 * @param[in] n2 Harmonic degree of the second Legendre function.
 * @param[in] m2 Harmonic order of the second Legendre function.
 * @param[in] pnmj The ``charm@P@_pnmj`` structure with the Fourier
 * coefficients of associated Legendre functions at least up to degree
 * ``CHARM_MAX(n1, n2)``.  It is assumed that the structure is prepared
 * beforehand by calling ``charm@P@_leg_pnmj_coeffs()``.
 *
 *
 * @param[out] err Error reported by the function (if any).
 *
 *
 * @returns The value ``ip`` of the integral.  In case of an error, returned is
 * the ``nan`` value and the error is written to ``err``.
 *
 * */
CHARM_EXTERN @RDT@ CHARM_CDECL
                   charm@P@_integ_pn1m1pn2m2(@RDT@ cltmin,
                                             @RDT@ cltmax,
                                             unsigned long n1,
                                             unsigned long m1,
                                             unsigned long n2,
                                             unsigned long m2,
                                             const charm@P@_pnmj *pnmj,
                                             charm@P@_err *err);






/** Analytically computes the integral
 *
 * \verbatim embed:rst:leading-asterisk
 *      .. math::
 *
 *          \mathrm{iy}
 *          = \int\limits_{\theta_{\mathrm{min}}}^{\theta_{\mathrm{max}}}
 *          \int\limits_{\lambda_{\mathrm{min}}}^{\lambda_{\mathrm{max}}}
 *          \bar{Y}_{i_1,n_1,m_1}(\theta, \lambda) \,
 *          \bar{Y}_{i_2,n_2,m_2}(\theta, \lambda) \, \mathrm{d} \lambda \,
 *          \sin(\theta) \, \mathrm{d}\theta{,} \quad \theta_{\mathrm{min}}
 *          \leq \theta_{\mathrm{max}}{,} \quad \lambda_{\mathrm{min}} \leq
 *          \lambda_{\mathrm{max}}{,}
 *
 * \endverbatim
 *
 * where
 *
 * \verbatim embed:rst:leading-asterisk
 *      .. math::
 *
 *          \bar{Y}_{i,n,m}(\theta, \lambda) = \begin{cases}
 *          \bar{P}_{nm}(\cos\theta) \, \cos(m \, \lambda) \quad &\textrm{if}
 *          \quad i = 0{,}\\ \bar{P}_{nm}(\cos\theta) \, \sin(m \, \lambda)
 *          \quad &\textrm{if} \quad i = 1{.} \end{cases}
 *
 * \endverbatim
 *
 *
 * @param[in] cltmin Minimum co-latitude in radians.
 * @param[in] cltmax Maximum co-latitude in radians.
 * @param[in] lonmin Minimum longitude in radians.
 * @param[in] lonmax Maximum longitude in radians.
 * @param[in] i1 ``0`` if the first spherical harmonic function is of the 
 * ``cos`` type; ``1`` for the ``sin`` type.
 * @param[in] n1 Harmonic degree of the first spherical harmonic function.
 * @param[in] m1 Harmonic order of the first spherical harmonic function.
 * @param[in] i2 ``0`` if the second spherical harmonic function is of the
 * ``cos`` type; ``1`` for the ``sin`` type.
 * @param[in] n2 Harmonic degree of the second spherical harmonic function.
 * @param[in] m2 Harmonic order of the second spherical harmonic function.
 * @param[in] pnmj The ``charm@P@_pnmj`` structure with the Fourier
 * coefficients of associated Legendre functions at least up to degree
 * ``CHARM_MAX(n1, n2)``.  It is assumed that the structure is prepared
 * beforehand by calling ``charm@P@_leg_pnmj_coeffs()``.
 *
 *
 * @param[out] err Error reported by the function (if any).
 *
 *
 * @returns The value ``iy`` of the integral.  In case of an error, returned is
 * the ``nan`` value and the error is written to ``err``.
 *
 * */
CHARM_EXTERN @RDT@ CHARM_CDECL
                   charm@P@_integ_yi1n1m1yi2n2m2(@RDT@ cltmin,
                                                 @RDT@ cltmax,
                                                 @RDT@ lonmin,
                                                 @RDT@ lonmax,
                                                 _Bool i1,
                                                 unsigned long n1,
                                                 unsigned long m1,
                                                 _Bool i2,
                                                 unsigned long n2,
                                                 unsigned long m2,
                                                 const charm@P@_pnmj *pnmj,
                                                 charm@P@_err *err);
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
#ifdef __cplusplus
}
#endif
/* ------------------------------------------------------------------------- */


#endif


